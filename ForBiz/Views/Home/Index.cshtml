@using ForBiz.Models.Instagram;
@using Newtonsoft.Json;
@using ForBiz.ViewModel.Shared;

@{
    ViewBag.Title = "Index";
}

@model InstagramVm

@*<div class="mdl-cell mdl-cell--6-col mdl-cell--8-col-tablet">
        <i class="material-icons">
        bookmark
    </i>6 (8 tablet)</div>
    <div class="mdl-cell mdl-cell--4-col mdl-cell--6-col-tablet">4 (6 tabl
    et)</div>
    <div class="mdl-cell mdl-cell--2-col mdl-cell--4-col-phone">2 (4 phone)</div>*@

@*<div class="mdl-cell mdl-cell--2-col mdl-cell--hide-tablet mdl-cell--hide-phone"></div>*@




<div class="" id="Instagram">
    @*<div></div>*@

    @{ 
        var pagination = Model.Page.Pagination;
    }

    <dialog class="mdl-dialog" ref="UpdatePersonDialog" v-if="true">
        <h5 class="mdl-dialog__title">{{Dialog.Info}}</h5>
        <div class="mdl-dialog__content">

            <div class="mdl-grid">

                <div v-mdl-textfield class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                    <input class="mdl-textfield__input" type="text" v-model="Dialog.CurrPerson.FIO">
                    <label class="mdl-textfield__label">FIO...</label>
                </div>

                <div v-mdl-textfield class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                    <input class="mdl-textfield__input" type="text" v-model="Dialog.CurrPerson.URL">
                    <label class="mdl-textfield__label">URL...</label>
                </div>

                <div v-mdl-textfield class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                    <label class="mdl-textfield__label" >EndPoint</label>
                    <select class="mdl-textfield__input" v-model="Dialog.CurrPerson.EndPoint">
                        <option disabled value=""></option>
                        <option value="1">Instagram</option>
                        <option value="2">VK</option>
                        <option value="3">Email</option>
                    </select>
                </div>

            </div>
        </div>
        <div class="mdl-dialog__actions">
            <button type="button" class="mdl-button remove" v-on:click="UpdateAndAddPerson()">{{Dialog.Info}}</button>
            <button type="button" class="mdl-button close" v-on:click="$refs.UpdatePersonDialog.close()">Отмена</button>
        </div>
    </dialog>

    <dialog class="mdl-dialog" ref="removePersonDialog">
        <h5 class="mdl-dialog__title">Удалить человека</h5>
        <div class="mdl-dialog__content">
            <p id="PersonNameDialog" v-html="Dialog.Info"> {{Dialog.Info}}</p>
        </div>
        <div class="mdl-dialog__actions">
            <button type="button" class="mdl-button remove" v-on:click="RemovePerson(Dialog.CurrPerson)">Да</button>
            <button type="button" class="mdl-button close" v-on:click="$refs.removePersonDialog.close()">Нет</button>
        </div>
    </dialog>

    <div class="mdl-grid" style="justify-content:center">
        <div class="">

            <a class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect"
               style="float: right; margin-right: 8px;" v-on:click="AddPersonDialog">
                <i class="material-icons">person_add</i>
                ADD PERSON
            </a>

            <table class="mdl-data-table mdl-js-data-table mdl-shadow--2dp mdl-cell mdl-cell--12-col">
                <thead>
                    <tr>
                        <th class="mdl-data-table__cell--non-numeric">ФИО</th>
                        <th>URL</th>
                        <th>EndPoint</th>
                        <th>TimeStamp</th>
                        <th>options</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="item in Persons">
                        <td class="mdl-data-table__cell--non-numeric">{{item.FIO}}</td>
                        <td>{{item.URL}}</td>
                        <td>{{item.EndPoint | endPointFilter}}</td>
                        <td>{{item.TimeStamp | formatDate}}</td>
                        <td>
                            <button class="mdl-button mdl-js-button mdl-button--icon" v-on:click="RemovePersonDialog(item)">
                                <i class="material-icons">remove</i>
                            </button>

                            <button class="mdl-button mdl-js-button mdl-button--icon" v-on:click="UpdatePersonDialog(item)">
                                <i class="material-icons">update</i>
                            </button>

                            @*<div class="button-option-person">
                    <button class="mdc-button js--dropdown-toggle">Меню</button>
                    <div class="mdc-menu-surface--anchor">
                        <div class="mdc-menu mdc-menu-surface" tabindex="-1" style="transform-origin: center bottom 0px; left: 0px; bottom: 0px; max-height: 806.188px;">
                            <ul class="mdc-list" role="menu" aria-hidden="true">
                                <li class="mdc-list-item mdc-ripple-upgraded" role="menuitem" tabindex="-1" v-on:click="RemovePerson(item)">Удалить</li>
                                <li class="mdc-list-divider" role="separator"></li>
                                <li class="mdc-list-item mdc-ripple-upgraded" role="menuitem" tabindex="-1" v-on:click="UpdatePerson(item)">Изменить</li>
                            </ul>
                        </div>
                    </div>
                </div>*@

                        </td>
                    </tr>
                    @(Html.Partial("PaginationAjax.mdl", new PaginationAjaxVm(pagination,
                           nextPageAction: $"instagram.getPage({pagination.NextPage}, {pagination.Size});",
                           previousPageAction: $"instagram.getPage({pagination.PreviousPage}, {pagination.Size});",
                           changePageNumberAction: $"instagram.getPage(pageNumber, {pagination.Size})",
                           changePageSizeAction: $"instagram.getPage(1, pageSize)")))
                </tbody>
            </table>
        </div>
    </div>

</div>

<script>

        var instagram = new Vue({
        el: '#Instagram',
        data: {
            Persons: [],
            Dialog: {
                Info: '',
                CurrPerson: {
                    Id: '',
                    FIO: '',
                    URL: '',
                    EndPoint: '',
                    TimeStamp: ''
                }
            }
        },
        methods: {
            // Lower Cast
            getPage: function (page, size) {
                this.ajaxRequest = true;
                this.$http.post('/Home/Page', { Page: page, Size: size })
                    .then(response => {
                        //alert(response.body);
                        instagram.Persons = response.body;
                        document.getElementById('pagination-ajax-size').value = size;
                        document.getElementById('pagination-ajax-page').value = page;
                        //location.reload();
                    }, response => {
                        alert('error');
                    });
            },
            AddPerson: function () {
                //this.ajaxRequest = false;

                this.$http.post('/Home/AddPerson',
                    { FIO: this.Dialog.CurrPerson.FIO, URL: this.Dialog.CurrPerson.URL, EndPoint: this.Dialog.CurrPerson.EndPoint, TimeStamp: new Date().toISOString() })
                    .then(response => {

                        //// get status
                        //alert(response.status);

                        //// get status text
                        //alert(response.statusText);

                        //// get 'Expires' header
                        //alert(response.headers.get('Expires'));

                        //// get body data
                        //alert(response.body);

                        location.reload();

                    }, response => {
                        alert('error');
                    });
            },
            AddPersonDialog: function () {

                this.Dialog.Info = 'Добавить';
                this.Dialog.CurrPerson = Object.assign({}, {
                    FIO: '',
                    URL: '',
                    EndPoint: '',
                    TimeStamp: ''
                });

                this.$refs.UpdatePersonDialog.showModal();
            },
            Info: function (value) {
                alert(value);
            },
            RemovePerson: function (value) {
                this.$http.post('/Home/DeletePerson', { Id: this.Dialog.CurrPerson.Id })
                    .then(response => {
                        location.reload();
                    }, response => {
                        alert('error');
                    });

                this.$refs.removePersonDialog.close();
            },
            RemovePersonDialog: function (value) {

                this.Dialog.Info = 'Уверены ли вы ? Что хотите удалить </br> ' + value.FIO;
                this.Dialog.CurrPerson = Object.assign({}, value);

                this.$refs.removePersonDialog.showModal();
            },
            UpdateAndAddPerson: function (value) {

                if (this.Dialog.Info === 'Добавить') {
                    this.AddPerson();
                }
                if (this.Dialog.Info === 'Изменить') {
                    this.UpdatePerson();
                }

                this.$refs.UpdatePersonDialog.close();
            },
            UpdatePersonDialog: function (value) {
                
                this.Dialog.Info = 'Изменить';
                this.Dialog.CurrPerson = Object.assign({}, value);

                this.$refs.UpdatePersonDialog.showModal();
            },
            UpdatePerson: function () {

                this.$http.post('/Home/UpdatePerson', this.Dialog.CurrPerson)
                    .then(response => {

                        location.reload();

                    }, response => {
                        alert('error')
                    });
            }
        },
        components: {
            Sidebar: { template: '<a href=\'33\'>Sidebar</a>' },
            dialog2: {
                template: '<input class="mdl-textfield__input" type="text" v-model="Dialog.CurrPerson.FIO">'}
        },
        filters: {
            formatDate: function (value) {
                if (value) {
                    return moment(value).format('DD-MM-YYYY HH:mm:ss');
                }
            },
            endPointFilter: function (value) {
                if (value) {
                    switch (value) {
                        case 1:
                            return 'Instagram';
                        case 2:
                            return 'VK';
                        case 3:
                            return 'Email';
                        default:
                            return value;
                    }
                }
            }
            },
        directives: {
            'mdl-textfield': {
                // определение директивы
                componentUpdated(el, binding, vnode) {
                    if (!(typeof el.MaterialTextfield === 'undefined')) {
                        if (el.MaterialTextfield.input_.value.length > 0)
                            el.MaterialTextfield.checkDirty();
                        else
                            el.MaterialTextfield.change();
                    }
                }
            }
        }
    })

    instagram.Persons = @(Html.Raw(JsonConvert.SerializeObject(Model.Page.Items)))


    function changePageSize(element, success) {
        if (event.which == 13 || event.keyCode == 13) {
            var pageSize = element.val();
            success(pageSize);
        }
    }

    function changePageNumber(element, success) {
        if (event.which == 13 || event.keyCode == 13) {
            var pageNumber = element.val();
            success(pageNumber);
        }
    }

    // Material Design Lite directive

    //Vue.directive('mdl-textfield', {
    //    bind(el, binding, vnode) {},
    //    update(el, binding, vnode) {},
    //    unbind(el, binding, vnode) {},
    //    componentUpdated(el, binding, vnode) {}
    //});

    //Vue.http.options.emulateJSON = true;

    //$(document).ready(function () {})

</script>

